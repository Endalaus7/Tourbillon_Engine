############################【DEVELOPS】############################################
1.贴图,需要和shader等资源抽象为一个材质组件
2.io system（键盘相应、文件io）
3.physical system（先实现修改transform即可）
4.编辑器（qt/imgui）
5.ecs序列化

############################【BUGS】################################################
1.【解决】多窗口下验证层报错：两个commandbuffer同时使用一个描述符资源
2.【解决】改变窗口大小报错：原因未知
3.多窗口下按键鼠标相应只改变第一个窗口

############################【OPTIMIZE】#############################################
1.资源管理：检查vulkan rhi的所有vk资源的释放
2.【解决】自定义智能指针：延迟销毁，gc算法
3.【解决】相机的pos,lookat,up从相机组件脱离出来，加入trans(包括函数移植
4.多窗口系统重构：考虑更合理的多窗口方案，将renderpipeline与window绑定（兼顾同屏）

############################【日志】#############################################
2025_1_2:计划添加场景、视口的概念。
场景下自由选择渲染资源（从ecs组件获取指针）;
视口绑定一个renderpass，自由组合subpass和pipeline（subpass、pipeline暂时想法是通过material管理）;
窗口只需要绑定到指定视口即可（还能在窗口内部调整比例尺寸）

2025_1_6:非文件载入的资源不使用assets，该类资源需要单独标识，避免和文件类资源混淆
非文件类的资源用序列化文件路径标识（或特殊标记+文件名，避免key过长）

2025_1_7:pass使用文件导入（暂时取消，没必要且浪费时间），pipeline直接继承RenderPipelineBase c++编写，之后加入rendersystem

2025_1_9:c++需要升级到c20

2025_2_19:首要任务是把rhi中繁琐的window部分迁移到rhiwindow，rhi不负责保存非单例的信息；抽象一层renderwindow供输入camera等，用于绑定实体信息
完成上述任务之后，将MainCameraPass中的操作简化，编写材质脚本。
系统修改：文件类资源应该不属于组件，可以反射但应该单独继承一个资源类